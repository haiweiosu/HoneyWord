In this case, where T, the training set is the top 100 commonly used password from given resource. 
Since the goal for honeyword is decreasing the guessing porbablity for attackers. A successful honeyword design is decrease the guessing probability to 1/n, where n is number of total password (1 true password and n-1 honeypassword associate with it.)
The algorithm we used in this case is called Taking-a-Tail method. "This method is identical to the chaffing-by-tail-tweaking method except that the tail of the new password is now randomly chosen bu the system, and required when user is entering new password" Resrouce from : http://fac.ksu.edu.sa/sites/default/files/honeywordsmonaalshahrani.pdf

For example: the true password user initially entered is abc, then the algorithm we deigsned can randomly generted a 3 digit number appending to this initial password and called this as the valid (or true) password for user to log in. Since all the valid passwords are in the form of "initial password + 3 digit number", we can randomly generate n number of honeyword with only change the last 3 digit. Therefore, all sweetwords are all distinct and has the same password format. Therefore, it's very hard for attackers to guess it correctly. 